/*
 * Copyright 2016 geoint.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.geoint.saasy;

import java.util.Set;
import org.geoint.saasy.event.SecurityTenantDisabled;
import org.geoint.saasy.event.SecurityTenantEnabled;
import org.geoint.saasy.event.TenantMembershipDisabled;
import org.geoint.saasy.event.TenantMembershipEnabled;
import org.geoint.saasy.event.TenantMembershipEstablished;

/**
 * A managed group of {@link SecuritySubject subjects} and
 * {@link ServiceSubject services} which share a common security model.
 *
 * @author steve_siebert
 */
public interface SecurityTenant {

    /**
     * Immutable globally unique tenant identifier, generated by the identity
     * management system.
     *
     * @return tenant identifier
     */
    String getGuid();

    /**
     * Human-readable name of the tenant.
     *
     * @return tenant name
     */
    String getName();

    /**
     * Returns a builder used to add a new member to the tenant.
     *
     * @param subject subject to add to the tenant
     * @return membership builder
     */
    TenantMembership.Builder createMembership(SecuritySubject subject);

    /**
     * Members of the tenant.
     *
     * @return tenant members
     */
    Set<TenantMembership> getMembers();

    /**
     * Check if the tenant is active.
     * <p>
     * Memberships to an inactive tenant MUST considered effectively disabled,
     * though the membership need not be explictly disabled upon tenant disable.
     * Instead, systems must verify that both the membership <b>AND</b>
     * the tenant are enabled.
     *
     * @return true if the tenant is enabled, otherwise false
     */
    boolean isEnabled();

    /**
     * Disable the tenant.
     *
     * @return disable event if the tenant was enabled and disable was
     * successful, otherwise throws exception
     */
    SecurityTenantDisabled disable();

    /**
     * Enable the tenant.
     *
     * @return enabled event if the tenant was disabled and enable was
     * successful, otherwise throws exception
     */
    SecurityTenantEnabled enable();

    /**
     * Add a listener to this tenant.
     *
     * @param listener listener
     */
    void addListener(SecurityTenant.Listener listener);

    /**
     * Remove a listener to this tenant.
     *
     * @param listener listener
     */
    void removeListener(SecurityTenant.Listener listener);

    /**
     * Tenant listener.
     */
    public interface Listener {

        /**
         * Called when the tenant is enabled from a disable state.
         *
         * @param enabled enable event
         */
        void enabled(SecurityTenantEnabled enabled);

        /**
         * Called when the tenant is disabled from an enabled state.
         *
         * @param disabled disable event
         */
        void disabled(SecurityTenantDisabled disabled);

        /**
         * Called when a member is added to the tenant.
         *
         * @param membership new member event
         */
        void memberAdded(TenantMembershipEstablished membership);

        /**
         * Called when a tenant membership is disabled.
         *
         * @param disabled membership disable event
         */
        void memberDisabled(TenantMembershipDisabled disabled);

        /**
         * Called when a tenant membership is enabled.
         *
         * @param enabled membership enable event
         */
        void memberEnabled(TenantMembershipEnabled enabled);

    }
}
