/*
 * Copyright 2016 geoint.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.geoint.saasy.session;

import java.time.ZonedDateTime;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.function.Supplier;
import org.geoint.saasy.IdentityManager;
import org.geoint.saasy.ResourceActionException;
import org.geoint.saasy.SecuritySubject;
import org.geoint.saasy.SecurityTenant;
import org.geoint.saasy.SecurityToken;
import org.geoint.saasy.TenantMembership;
import org.geoint.saasy.authc.AuthenticationException;
import org.geoint.saasy.authc.SecurityCredential;
import org.geoint.saasy.authc.SubjectAuthenticated;
import org.geoint.saasy.authz.Authorization;
import org.geoint.saasy.authz.AuthorizationException;
import org.geoint.saasy.authz.AuthorizationProfile;
import org.geoint.saasy.authz.event.AuthorizationGranted;
import org.geoint.saasy.authz.event.AuthorizationRevoked;
import org.geoint.saasy.session.event.AssuranceLevelElevated;
import org.geoint.saasy.session.event.NoSessionProfile;
import org.geoint.saasy.session.event.SecuritySessionBound;
import org.geoint.saasy.session.event.SecuritySessionClosed;
import org.geoint.saasy.session.event.SecuritySessionPropertyChanged;
import org.geoint.saasy.session.event.SecuritySessionUnbound;
import org.geoint.saasy.session.event.SessionProfileChanged;

/**
 * An authenticated session for a subject.
 *
 * @author steve_siebert
 */
public interface SecuritySession {

    /**
     * Unique session identifier which is generated by the server on session
     * creation.
     *
     * @return session identifier
     */
    String getSessionGuid();

    /**
     * The subject name associated with this session.
     *
     * @return subject name
     */
    String getSubjectName();

    /**
     * Subject associated with the session.
     *
     * @return session subject
     */
    SecuritySubject getSubject();

    /**
     * The current tenant/membership associated with this session.
     *
     * @return
     */
    SecurityTenant getTenancy();

    /**
     * Authentication assurance level based on all credentials authenticated
     * within this session.
     *
     * @return aggregate assurance level
     */
    int getAssuranceLevel();

    /**
     * Attempt to authenticate user against all user credentials with provided
     * credential object.
     * <p>
     * Credential object can be any object and is checked against every subject
     * {@link SecurityCredential} instance until it is authenticated or no
     * SecurityCredentials remain.
     *
     * @param cred credential object
     * @return successful authentication event
     * @throws AuthenticationException thrown if authentication failed
     */
    SubjectAuthenticated authenticate(Object cred)
            throws AuthenticationException;

    /**
     * Detailed results for each successful authentication for this session.
     *
     * @return session authentication history
     */
    Set<SubjectAuthenticated> getAuthentications();

    /**
     * The current profile/persona selected for the session, or null if no
     * profile is currently selected.
     *
     * @return current profile
     */
    Optional<TenantMembership> getProfile();

    /**
     * The current authorization profile in use by the Subject or null if no
     * authorization profile is currently selected.
     * <p>
     * If no authorization profile is selected the ONLY action the subject is
     * permitted to make is selection of an available profile.
     *
     * @return current subject profile
     */
    Optional<AuthorizationProfile> getAuthorizations();

//    /**
//     * Determine if the subject, in this session context, is permitted to the
//     * provided resource context.
//     *
//     * @param resource resource context
//     * @param instance resource instance
//     * @return true if authorized, otherwise false
//     */
//    boolean isAuthorized(OperationModel resource, Object instance);
//
//    /**
//     * Invokes the action designated by the resource context with the provided
//     * arguments, returning the result of the action of throwing an exception if
//     * failed.
//     *
//     * @param resource resource context
//     * @param instance resource instance
//     * @param args action arguments
//     * @return action results
//     * @throws AuthorizationException thrown if the subject is not authorized to
//     * invoke the resource action with the current session authorization profile
//     * @throws ResourceActionException if the resource threw a resource
//     */
//    Object invoke(OperationModel resource, Object instance, Object... args)
//            throws AuthorizationException, ResourceActionException;

    /**
     * Time the session was created.
     *
     * @return creation time
     */
    ZonedDateTime getCreatedTime();

    /**
     * Time the session was/will be closed.
     * <p>
     * Closed sessions will return a time in the past, while an open session
     * will return a future time based the last subscriber activity on the
     * session and the session timeout configuration.
     *
     * @return time the session was/will be closed
     */
    ZonedDateTime getCloseTime();

    /**
     * An immutable map of session properties, which may be set from a
     * {@link SubscribedSession subscriber}.
     * <p>
     * This returned map instance is immutable and thread-safe, but its values
     * may be changed on another thread.
     *
     * @return session properties
     */
    Map<String, String> getProperties();

    /**
     * Returns the value of a session property or null.
     *
     * @param name property name
     * @return property value if property exists on session
     */
    Optional<String> findProperty(String name);

    /**
     * Returns the session property value if set or the default value generated
     * by the provided supplier.
     *
     * @param name property name
     * @param defaultValue default value generator
     * @return session property value or default valueif property is not set
     */
    String getProperty(String name, Supplier<String> defaultValue);

    /**
     * Checks if the session is active.
     *
     * @return true if the session is active, otherwise false
     */
    boolean isActive();

    /**
     * Subscribers connected to this subjects session.
     *
     * @return session subscribers
     */
    Set<SessionSubscriber> getSubscribers();

    /**
     * Returns a session subscription for the related subject, creating a
     * subscription with the {@link IdentityManager#getSystemSubject()
     * system subject} as the subscriber.
     *
     * @return subscription to the session
     */
    SubscribedSession subscribe();

    /**
     * Appends session content to the security token.
     *
     * @param tokenBuilder token builder
     */
    void tokenize(SecurityToken.Builder tokenBuilder);

    /**
     * Closes the subject session, closing all session subscribers in the
     * process.
     */
    void close();

    /**
     * Receives events related to the session and any authorization-related
     * changes for the current {@link TenantMembership profile}.
     */
    public interface Listener {

        default void sessionClosed(SecuritySessionClosed closed) {
            //default do nothing
        }

        default void subscriberBound(SecuritySessionBound binging) {
            //default do nothing
        }

        default void subscriberUnbound(SecuritySessionUnbound unbound) {
            //default do nothing
        }

        default void propertyChange(SecuritySessionPropertyChanged change) {
            //default do nothing
        }

        default void authentication(SubjectAuthenticated auth) {
            //default do nothing
        }

        default void assuranceElevated(AssuranceLevelElevated assurance) {
            //default do nothing
        }

        /**
         * A new authorization has been granted to the current session profile.
         * <p>
         * Authorizations granted for other subject profiles will not not be
         * notified to this listener.
         *
         * @param event authorization grant event
         * @param authz authorization
         */
        default void authorizationGranted(AuthorizationGranted event,
                Authorization authz) {
            //default do nothing
        }

        /**
         * An authorization has been revoked within the current associated
         * session authorization profile.
         *
         * @param event authorization revoke event
         */
        default void authorizationRevoked(AuthorizationRevoked event) {
            //default do nothing
        }

        /**
         * The authorization profile has been changed on the session.
         * <p>
         * If the authorization profile has been removed, and no session profile
         * has been designated, the 
         * {@link Listener#authorizationsRemovedNoSessionProfile) } method will
         * be instead be called.
         *
         * @param event profile change event
         */
        default void profileChanged(SessionProfileChanged event) {
            //default do nothing
        }

        /**
         * Called when the authorization profile has been removed (not replaced)
         * from the session.
         *
         * @param event
         */
        default void authorizationsRemoved(NoSessionProfile event) {
            //default do nothing
        }
    }
}
